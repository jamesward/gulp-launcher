#!/bin/sh
#
# A Gulp Launcher for *nix and Cygwin
#

readonly LAUNCHER_VERSION=0.0.1
readonly JQ_VERSION=1.3
readonly BASE_LOCAL_DIR=$HOME/.gulp-launcher


# Validates that the current dir contains a valid gulp project
validProject() {
  [ -e package.json ] && [ getRawNodeVersion ]
}


# Gets the system os and architecture
getSystemInfo() {
  readonly ARCH_32="i686"
  readonly ARCH_64="x86_64"

  readonly ARCH=$(uname -m)

  readonly OS_LINUX="LINUX"
  readonly OS_MAC="MAC"
  readonly OS_CYGWIN="CYGWIN"

  if [ "$(uname)" == "Darwin" ]; then
    readonly OS=$OS_MAC
  elif [ "$(uname -o)" == "GNU/Linux" ]; then
    readonly OS=$OS_LINUX
  elif [ "$(uname -o)" == "Cygwin" ]; then
    readonly OS=$OS_CYGWIN
  fi
}

wget() {

  local HOST=$1
  local PATH=$2
  local FILE=$3

  echo $HOST $PATH $FILE

  # fetch the file and save it to the path provided
  echo "Downloading https://$HOST$PATH\n"

  # todo: no-dependency downloads
  # todo: dynamic path to openssl
  # todo: drop the http response headers
  #printf "GET $PATH HTTP/1.0\nHost: $HOST\n\n" | /usr/bin/openssl s_client -quiet -connect $HOST:443 > f.out
  $(/usr/local/bin/wget -O $FILE https://$HOST$PATH)

}

# Run jq (json query tool) (downloading it if needed)
jq() {

  local JQ_BIN=$BASE_LOCAL_DIR/tools/jq-$JQ_VERSION

  if [[ ! -e $JQ_BIN ]]; then
    $(mkdir -p $BASE_LOCAL_DIR/tools)
    
    readonly JQ_HOST="stedolan.github.io"

    if [ $OS == $OS_LINUX ] && [ $ARCH == $ARCH_32 ]; then
      readonly JQ_PATH="/jq/download/linux32/jq-$JQ_VERSION/jq"
    elif [ $OS == $OS_LINUX ] && [ $ARCH == $ARCH_64 ]; then
      readonly JQ_PATH="/jq/download/linux64/jq-$JQ_VERSION/jq"
    elif [ $OS == $OS_MAC ] && [ $ARCH == $ARCH_32 ]; then
      readonly JQ_PATH="/jq/download/osx32/jq-$JQ_VERSION/jq"
    elif [ $OS == $OS_MAC ] && [ $ARCH == $ARCH_64 ]; then
      readonly JQ_PATH="/jq/download/osx64/jq-$JQ_VERSION/jq"
    elif [ $OS == $OS_CYGWIN ] && [ $ARCH == $ARCH_32 ]; then
      readonly JQ_PATH="/jq/download/win32/jq-$JQ_VERSION/jq"
    elif [ $OS == $OS_CYGWIN ] && [ $ARCH == $ARCH_64 ]; then
      readonly JQ_PATH="/jq/download/win64/jq-$JQ_VERSION/jq"
    fi

    echo "Downloading jq $JQ_VERSION for $ARCH $OS"

    wget $JQ_HOST $JQ_PATH $JQ_BIN

    $(/bin/chmod +x $JQ_BIN)
  fi

  $JQ_BIN $*
}


# Parse the package.json to figure out the raw node version
getRawNodeVersion() {
  
  readonly NODE_RAW_VERSION=$(jq -r '.engines.node' package.json)

}


# Gets the Node version number
getNodeVersion() {

  getRawNodeVersion

  readonly NODE_VERSION_RESOLVE_URL=https://semver.io/node/resolve/$NODE_RAW_VERSION

  # todo - no curl
  readonly NODE_VERSION=$(curl -s $NODE_VERSION_RESOLVE_URL)
}


# Downloads Node
downloadNode() {

  getNodeVersion

  # download Node binary
  local NODE_DIR=$BASE_LOCAL_DIR/tools/node-$NODE_VERSION

  if [ $OS == $OS_LINUX ] && [ $ARCH == $ARCH_32 ]; then
    readonly NODE_DOWNLOAD_PATH="/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x86.tar.gz"
    readonly NODE_PATH=$NODE_DIR/node-v${NODE_VERSION}-linux-x86/bin/node
    readonly NPM_PATH=$NODE_DIR/node-v${NODE_VERSION}-linux-x86/bin/npm
  elif [ $OS == $OS_LINUX ] && [ $ARCH == $ARCH_64 ]; then
    readonly NODE_DOWNLOAD_PATH="/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz"
    readonly NODE_PATH=$NODE_DIR/node-v${NODE_VERSION}-linux-x64/bin/node
    readonly NPM_PATH=$NODE_DIR/node-v${NODE_VERSION}-linux-x64/bin/npm
  elif [ $OS == $OS_MAC ] && [ $ARCH == $ARCH_32 ]; then
    readonly NODE_DOWNLOAD_PATH="/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-darwin-x86.tar.gz"
    readonly NODE_PATH=$NODE_DIR/node-v${NODE_VERSION}-darwin-x86/bin/node
    readonly NPM_PATH=$NODE_DIR/node-v${NODE_VERSION}-darwin-x86/bin/npm
  elif [ $OS == $OS_MAC ] && [ $ARCH == $ARCH_64 ]; then
    readonly NODE_DOWNLOAD_PATH="/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-darwin-x64.tar.gz"
    readonly NODE_PATH=$NODE_DIR/node-v${NODE_VERSION}-darwin-x64/bin/node
    readonly NPM_PATH=$NODE_DIR/node-v${NODE_VERSION}-darwin-x64/bin/npm
  elif [ $OS == $OS_CYGWIN ] && [ $ARCH == $ARCH_32 ]; then
    readonly NODE_DOWNLOAD_PATH="/dist/v${NODE_VERSION}/node.exe"
    readonly NODE_PATH=$NODE_DIR/node.exe
    readonly NPM_PATH=$NODE_DIR/npm.exe
  elif [ $OS == $OS_CYGWIN ] && [ $ARCH == $ARCH_64 ]; then
    readonly NODE_DOWNLOAD_PATH="/dist/v${NODE_VERSION}/x64/node.exe"
    readonly NODE_PATH=$NODE_DIR/node.exe
    readonly NPM_PATH=$NODE_DIR/npm.exe
  fi

  if [[ ! -e $NODE_DIR ]]; then
    local NODE_HOST="nodejs.org"

    if [ $OS == $OS_CYGWIN ]; then
      echo "Downloading node $NODE_VERSION for $ARCH $OS"
      wget $NODE_HOST $NODE_DOWNLOAD_PATH $NODE_DIR

      echo "Downloading npm ??? for $ARCH $OS"
      # todo
    else
      echo "Downloading node $NODE_VERSION for $ARCH $OS"
      $(mkdir $NODE_DIR)
      wget $NODE_HOST $NODE_DOWNLOAD_PATH $NODE_DIR/node.zip
      $(tar -zxv -f $NODE_DIR/node.zip -C $NODE_DIR)
      $(rm $NODE_DIR/node.zip)
    fi

  fi
  
}


# Downloads Gulp
downloadGulp() {

  downloadNode

  # todo - verify package.json contains a gulp version
  # .devDependencies.gulp

  # todo - only do this if package.json has changed

  # get gulp
  $NPM_PATH install

}


# Runs gulp on the project
runGulp() {

  downloadGulp

  # Run gulp
  $NODE_PATH node_modules/gulp/bin/gulp.js
}

# Main

getSystemInfo

if validProject; then
  runGulp
else
  echo "creating a new project"
fi
